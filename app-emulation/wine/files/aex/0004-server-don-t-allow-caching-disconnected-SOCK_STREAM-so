diff -r -u -p a/server/sock.c b/server/sock.c
--- a/server/sock.c	2009-12-11 14:09:05.000000000 +0100
+++ b/server/sock.c	2009-12-11 14:10:33.191949901 +0100
@@ -95,6 +95,7 @@ static void sock_destroy( struct object 
 static int sock_get_poll_events( struct fd *fd );
 static void sock_poll_event( struct fd *fd, int event );
 static enum server_fd_type sock_get_fd_type( struct fd *fd );
+static int sock_removable( struct fd *fd );
 static void sock_queue_async( struct fd *fd, const async_data_t *data, int type, int count );
 static void sock_reselect_async( struct fd *fd, struct async_queue *queue );
 static void sock_cancel_async( struct fd *fd, struct process *process, struct thread *thread, client_ptr_t iosb );
@@ -128,7 +129,7 @@ static const struct fd_ops sock_fd_ops =
     sock_poll_event,              /* poll_event */
     no_flush,                     /* flush */
     sock_get_fd_type,             /* get_file_info */
-    default_fd_removable,         /* removable */
+    sock_removable,               /* removable */
     default_fd_ioctl,             /* ioctl */
     sock_queue_async,             /* queue_async */
     sock_reselect_async,          /* reselect_async */
@@ -491,6 +492,15 @@ static enum server_fd_type sock_get_fd_t
     return FD_TYPE_SOCKET;
 }
 
+static int sock_removable( struct fd *fd )
+{
+    struct sock *sock = get_fd_user( fd );
+    assert( sock->obj.ops == &sock_ops );
+
+    /* Don't cache SOCK_STREAM sockets until connected (needed for AcceptEx) */
+    return sock->type == SOCK_STREAM && !sock->polling;
+}
+
 static void sock_queue_async( struct fd *fd, const async_data_t *data, int type, int count )
 {
     struct sock *sock = get_fd_user( fd );
