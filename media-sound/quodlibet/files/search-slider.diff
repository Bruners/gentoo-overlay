diff --git a/quodlibet/quodlibet/qltk/controls.py b/quodlibet/quodlibet/qltk/controls.py
--- a/quodlibet/quodlibet/qltk/controls.py
+++ b/quodlibet/quodlibet/qltk/controls.py
@@ -21,46 +21,33 @@ from quodlibet.qltk.sliderbutton import

SIZE = gtk.ICON_SIZE_LARGE_TOOLBAR

-class SeekBar(HSlider):
+class SeekBar(gtk.HBox):
__lock = False
__sig = None
__seekable = True

def __init__(self, player, library):
- hbox = gtk.HBox(spacing=3)
- l = gtk.Label("0:00")
- hbox.pack_start(l)
- hbox.pack_start(
- gtk.Arrow(gtk.ARROW_RIGHT, gtk.SHADOW_NONE), expand=False)
- super(SeekBar, self).__init__(hbox)
+ super(SeekBar, self).__init__()
+
+ self.scale = gtk.HScale()
+ self.scale.set_digits(0)
+ self.scale.set_draw_value(True)
+ self.scale.set_value_pos(gtk.POS_LEFT)
+ self.pack_start(self.scale)
+
+ self.length = gtk.Label("0:00")
+ self.pack_start(self.length, expand = False)

self.scale.connect('button-press-event', self.__seek_lock)
self.scale.connect('button-release-event', self.__seek_unlock, player)
self.scale.connect('key-press-event', self.__seek_lock)
self.scale.connect('key-release-event', self.__seek_unlock, player)
self.connect('scroll-event', self.__scroll, player)
- self.scale.connect('value-changed', self.__update_time, l)
-
- m = gtk.Menu()
- c = ConfigCheckMenuItem(
- _("Display remaining time"), "player", "time_remaining")
- c.set_active(config.getboolean("player", "time_remaining"))
- c.connect_object('toggled', self.scale.emit, 'value-changed')
- self.__remaining = c
- m.append(c)
- m.append(gtk.SeparatorMenuItem())
- i = qltk.MenuItem(_("_Edit Bookmarks..."), gtk.STOCK_EDIT)
- i.connect_object(
- 'activate', bookmarks.EditBookmarks, self, library, player)
- m.append(i)
- m.show_all()
- self.child.connect_object(
- 'button-press-event', self.__check_menu, m, player)
- self.connect_object('popup-menu', self.__popup_menu, m, player,
- self.child.child)
+# self.scale.connect('value-changed', self.__update_time)
+ self.scale.connect('format-value', self.__format_time)

gobject.timeout_add(1000, self.__check_time, player)
- player.connect('song-started', self.__song_changed, l, m)
+ player.connect('song-started', self.__song_changed)
player.connect('seek', self.__seeked)

def __check_menu(self, menu, event, player):
@@ -115,26 +102,26 @@ class SeekBar(HSlider):
self.scale.set_value(position)
return True

- def __update_time(self, scale, timer):
+ def __update_time(self, scale):
value = scale.get_value()
max = scale.get_adjustment().upper
value -= self.__remaining.get_active() * max
- timer.set_text(util.format_time(value))

- def __song_changed(self, player, song, label, menu):
+ def __format_time(self, scale, value):
+ return util.format_time(value)
+
+ def __song_changed(self, player, song):
if song and song.get("~#length", 0) > 0:
length = song["~#length"]
self.scale.set_range(0, length)
self.scale.set_value(0)
+ self.length.set_text(util.format_time(length))
self.__seekable = True
else:
self.scale.set_range(0, 1)
self.scale.set_value(0)
+ self.length.set_text("0:00")
self.__seekable = False
- for child in menu.get_children()[2:-1]:
- menu.remove(child)
- child.destroy()
- menu.get_children()[-1].set_sensitive(self.__seekable)
self.scale.emit('value-changed')

class Volume(VSlider):
@@ -201,7 +188,7 @@ class StopAfterMenu(gtk.Menu):
class PlayControls(gtk.VBox):
def __init__(self, player, library):
gtk.VBox.__init__(self, spacing=3)
- hbox = gtk.HBox(spacing=3)
+ hbox = gtk.HBox(spacing=5)
prev = gtk.Button()
prev.add(gtk.image_new_from_stock(gtk.STOCK_MEDIA_PREVIOUS, SIZE))
hbox.pack_start(prev)
@@ -215,13 +202,11 @@ class PlayControls(gtk.VBox):
next.add(gtk.image_new_from_stock(gtk.STOCK_MEDIA_NEXT, SIZE))
hbox.pack_start(next)

- self.pack_start(hbox, expand=False, fill=False)
-
- hbox = gtk.HBox(spacing=3)
self.volume = Volume(player)
hbox.pack_start(self.volume, expand=False)
- hbox.pack_start(SeekBar(player, library))
+
self.pack_start(hbox, expand=False, fill=False)
+ self.pack_start(SeekBar(player, library), fill=False)

prev.connect_object('clicked', self.__previous, player)
play.connect('toggled', self.__playpause, player)

diff --git a/quodlibet/quodlibet/qltk/controls.py b/quodlibet/quodlibet/qltk/controls.py
--- a/quodlibet/quodlibet/qltk/controls.py
+++ b/quodlibet/quodlibet/qltk/controls.py
@@ -21,46 +21,33 @@ from quodlibet.qltk.sliderbutton import

SIZE = gtk.ICON_SIZE_LARGE_TOOLBAR

-class SeekBar(HSlider):
+class SeekBar(gtk.HBox):
__lock = False
__sig = None
__seekable = True

def __init__(self, player, library):
- hbox = gtk.HBox(spacing=3)
- l = gtk.Label("0:00")
- hbox.pack_start(l)
- hbox.pack_start(
- gtk.Arrow(gtk.ARROW_RIGHT, gtk.SHADOW_NONE), expand=False)
- super(SeekBar, self).__init__(hbox)
+ super(SeekBar, self).__init__()
+
+ self.scale = gtk.HScale()
+ self.scale.set_digits(0)
+ self.scale.set_draw_value(True)
+ self.scale.set_value_pos(gtk.POS_LEFT)
+ self.pack_start(self.scale)
+
+ self.length = gtk.Label("0:00")
+ self.pack_start(self.length, expand = False)

self.scale.connect('button-press-event', self.__seek_lock)
self.scale.connect('button-release-event', self.__seek_unlock, player)
self.scale.connect('key-press-event', self.__seek_lock)
self.scale.connect('key-release-event', self.__seek_unlock, player)
self.connect('scroll-event', self.__scroll, player)
- self.scale.connect('value-changed', self.__update_time, l)
-
- m = gtk.Menu()
- c = ConfigCheckMenuItem(
- _("Display remaining time"), "player", "time_remaining")
- c.set_active(config.getboolean("player", "time_remaining"))
- c.connect_object('toggled', self.scale.emit, 'value-changed')
- self.__remaining = c
- m.append(c)
- m.append(gtk.SeparatorMenuItem())
- i = qltk.MenuItem(_("_Edit Bookmarks..."), gtk.STOCK_EDIT)
- i.connect_object(
- 'activate', bookmarks.EditBookmarks, self, library, player)
- m.append(i)
- m.show_all()
- self.child.connect_object(
- 'button-press-event', self.__check_menu, m, player)
- self.connect_object('popup-menu', self.__popup_menu, m, player,
- self.child.child)
+# self.scale.connect('value-changed', self.__update_time)
+ self.scale.connect('format-value', self.__format_time)

gobject.timeout_add(1000, self.__check_time, player)
- player.connect('song-started', self.__song_changed, l, m)
+ player.connect('song-started', self.__song_changed)
player.connect('seek', self.__seeked)

def __check_menu(self, menu, event, player):
@@ -115,26 +102,26 @@ class SeekBar(HSlider):
self.scale.set_value(position)
return True

- def __update_time(self, scale, timer):
+ def __update_time(self, scale):
value = scale.get_value()
max = scale.get_adjustment().upper
value -= self.__remaining.get_active() * max
- timer.set_text(util.format_time(value))

- def __song_changed(self, player, song, label, menu):
+ def __format_time(self, scale, value):
+ return util.format_time(value)
+
+ def __song_changed(self, player, song):
if song and song.get("~#length", 0) > 0:
length = song["~#length"]
self.scale.set_range(0, length)
self.scale.set_value(0)
+ self.length.set_text(util.format_time(length))
self.__seekable = True
else:
self.scale.set_range(0, 1)
self.scale.set_value(0)
+ self.length.set_text("0:00")
self.__seekable = False
- for child in menu.get_children()[2:-1]:
- menu.remove(child)
- child.destroy()
- menu.get_children()[-1].set_sensitive(self.__seekable)
self.scale.emit('value-changed')

class Volume(VSlider):
@@ -201,7 +188,7 @@ class StopAfterMenu(gtk.Menu):
class PlayControls(gtk.VBox):
def __init__(self, player, library):
gtk.VBox.__init__(self, spacing=3)
- hbox = gtk.HBox(spacing=3)
+ hbox = gtk.HBox(spacing=5)
prev = gtk.Button()
prev.add(gtk.image_new_from_stock(gtk.STOCK_MEDIA_PREVIOUS, SIZE))
hbox.pack_start(prev)
@@ -215,13 +202,11 @@ class PlayControls(gtk.VBox):
next.add(gtk.image_new_from_stock(gtk.STOCK_MEDIA_NEXT, SIZE))
hbox.pack_start(next)

- self.pack_start(hbox, expand=False, fill=False)
-
- hbox = gtk.HBox(spacing=3)
self.volume = Volume(player)
hbox.pack_start(self.volume, expand=False)
- hbox.pack_start(SeekBar(player, library))
+
self.pack_start(hbox, expand=False, fill=False)
+ self.pack_start(SeekBar(player, library), fill=False)

prev.connect_object('clicked', self.__previous, player)
play.connect('toggled', self.__playpause, player)

